/*
 * generated by Xtext 2.25.0
 */
package org.rm2pt.sample.lab2.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.rm2pt.sample.lab2.metamodel.lab2.Course;
import org.rm2pt.sample.lab2.metamodel.lab2.ExamPaper;
import org.rm2pt.sample.lab2.metamodel.lab2.Lab2Package;
import org.rm2pt.sample.lab2.metamodel.lab2.ReportCard;
import org.rm2pt.sample.lab2.metamodel.lab2.Student;
import org.rm2pt.sample.lab2.metamodel.lab2.SubmitedPaper;
import org.rm2pt.sample.lab2.metamodel.lab2.Teacher;
import org.rm2pt.sample.lab2.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Lab2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Lab2Package.CLASS:
				sequence_Class(context, (org.rm2pt.sample.lab2.metamodel.lab2.Class) semanticObject); 
				return; 
			case Lab2Package.COURSE:
				sequence_Course(context, (Course) semanticObject); 
				return; 
			case Lab2Package.EXAM_PAPER:
				sequence_ExamPaper(context, (ExamPaper) semanticObject); 
				return; 
			case Lab2Package.REPORT_CARD:
				sequence_ReportCard(context, (ReportCard) semanticObject); 
				return; 
			case Lab2Package.STUDENT:
				sequence_Student(context, (Student) semanticObject); 
				return; 
			case Lab2Package.SUBMITED_PAPER:
				sequence_SubmitedPaper(context, (SubmitedPaper) semanticObject); 
				return; 
			case Lab2Package.TEACHER:
				sequence_Teacher(context, (Teacher) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (id=EString? studentnum=EInt? grade=EString? (teacher+=Teacher teacher+=Teacher*)? (student+=Student student+=Student*)?)
	 */
	protected void sequence_Class(ISerializationContext context, org.rm2pt.sample.lab2.metamodel.lab2.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Course returns Course
	 *
	 * Constraint:
	 *     (name=EString id=EString? stunum=EInt? mean=EFloat?)
	 */
	protected void sequence_Course(ISerializationContext context, Course semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExamPaper returns ExamPaper
	 *
	 * Constraint:
	 *     (
	 *         ifanswer?='ifanswer'? 
	 *         ifcorrect?='ifcorrect'? 
	 *         id=EString? 
	 *         courseid=EString? 
	 *         teaid=EString? 
	 *         stuid=EString? 
	 *         score=EFloat? 
	 *         (submit+=SubmitedPaper submit+=SubmitedPaper*)?
	 *     )
	 */
	protected void sequence_ExamPaper(ISerializationContext context, ExamPaper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReportCard returns ReportCard
	 *
	 * Constraint:
	 *     (id=EString? stuid=EString? stuname=EString? totalscore=EFloat? rank=EInt?)
	 */
	protected void sequence_ReportCard(ISerializationContext context, ReportCard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Student returns Student
	 *
	 * Constraint:
	 *     (name=EString id=EString? classid=EString? have=[ReportCard|EString] (answer+=ExamPaper answer+=ExamPaper*)?)
	 */
	protected void sequence_Student(ISerializationContext context, Student semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmitedPaper returns SubmitedPaper
	 *
	 * Constraint:
	 *     (
	 *         ifcorrect?='ifcorrect'? 
	 *         ifanswer?='ifanswer'? 
	 *         id=EString? 
	 *         stuid=EString? 
	 *         teaid=EString? 
	 *         courseid=EString?
	 *     )
	 */
	protected void sequence_SubmitedPaper(ISerializationContext context, SubmitedPaper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Teacher returns Teacher
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         id=EString? 
	 *         classid=EString? 
	 *         correct+=[SubmitedPaper|EString] 
	 *         correct+=[SubmitedPaper|EString]* 
	 *         (teaching+=Course teaching+=Course*)? 
	 *         (input+=ReportCard input+=ReportCard*)?
	 *     )
	 */
	protected void sequence_Teacher(ISerializationContext context, Teacher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
